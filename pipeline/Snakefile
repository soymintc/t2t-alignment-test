
configfile: "../metadata/config.yaml"
root_dir = config['root_dir']

ILLUMINA_SAMPLES = ['HCM-BROD-0476-C56-10A', 'HCM-BROD-0476-C56-85M']
ONT_SAMPLES = ['AK-RT-004-T', 'AK-RT-004-N']
GENOMES = ['GRCh38', 'T2T']
#GENOMES = ['GRCh38']

wildcard_constraints:
    genome = 'GRCh38|T2T',

rule all:
    input:
        #expand(os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.illumina_{genome}.bam'), sample=SAMPLES, genome=GENOMES,),
        expand(os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.illumina_{genome}.sorted.bam'), sample=ILLUMINA_SAMPLES, genome=GENOMES,),
        expand(os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.ont_{genome}.sorted.bam'), sample=ONT_SAMPLES, genome=GENOMES,),

rule sort_bam_by_readname:
    input:
        bam = os.path.join(root_dir, 'data/bam/{sample}/{sample}.bam'),
    output:
        bam = os.path.join(root_dir, 'data/bam/{sample}/{sample}.sort_n.bam'),
    params:
        compression_level = 9, # 0 uncompressed, 9 best
    threads: 8,
    log:
        os.path.join(root_dir, 'data/bam/{sample}/{sample}.sort_n.bam.log'),
    shell:
        "sambamba sort -N {input.bam} -o {output.bam} -l {params.compression_level} -p -t {threads} &> {log}"

rule fastq_to_bam:
    input:
        bam = os.path.join(root_dir, 'data/bam/{sample}/{sample}.sort_n.bam'),
    output:
        fq1 = temp(os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R1.fastq')),
        fq2 = temp(os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R2.fastq')),
    log:
        os.path.join(root_dir, 'data/fastq/{sample}/{sample}.bamtofastq.log'),
    shell:
        'bedtools bamtofastq -i {input.bam} -fq {output.fq1} -fq2 {output.fq2} &> {log}'

rule gzip_fastq:
    input:
        fq = os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R{i}.fastq'),
    output:
        fq = os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R{i}.fastq.gz'),
    shell:
        'gzip -c {input.fq} > {output.fq}'

rule bwa_mem:
    input:
        fq1 = os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R1.fastq.gz'),
        fq2 = os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R2.fastq.gz'),
    output:
        bam = os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.illumina_{genome}.sorted.bam'),
    log:
        os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.illumina_{genome}.bam.log'),
    threads: 8,
    params:
        ref = lambda w: config['fasta'][w.genome],
        compression_level = 9, # 0 uncompressed, 9 best
    shell:
        'bwa mem -M -t {threads} {params.ref} {input.fq1} {input.fq2} 2> {log} | '
        'samtools view -bSh -O BAM - 2>> {log} | '
        'samtools sort -@ {threads} - 2>> {log} > {output.bam}'

rule minimap2:
    input:
        fq = os.path.join(root_dir, 'data/fastq/{sample}/{sample}_R1.fastq.gz'),
    output:
        bam = os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.ont_{genome}.sorted.bam'),
    log:
        os.path.join(root_dir, 'data/output_bam/{sample}/{sample}.ont_{genome}.bam.log'),
    threads: 16,
    params:
        ref = lambda w: config['fasta'][w.genome] + '.mmi', # ONT ref
        compression_level = 9, # 0 uncompressed, 9 best
        minimap2 = '/fscratch/chois7/packages/minimap2',
    shell:
        '{params.minimap2} -ax map-ont -t {threads} {params.ref} {input.fq} 2> {log} | '
        'samtools view -bh -O BAM -@ - 2>> {log} | '
        'samtools sort -@ {threads} - 2>> {log} > {output.bam}'
